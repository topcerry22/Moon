{"version":3,"file":"ecsy.module.min.js","sources":["../src/Utils.js","../src/SystemManager.js","../src/ObjectPool.js","../src/EventDispatcher.js","../src/Query.js","../src/QueryManager.js","../src/Component.js","../src/SystemStateComponent.js","../src/EntityManager.js","../src/ComponentManager.js","../src/Version.js","../src/Entity.js","../src/World.js","../src/System.js","../src/TagComponent.js","../src/Types.js","../src/RemoteDevTools/utils.js","../src/RemoteDevTools/index.js"],"sourcesContent":["/**\r\n * Return the name of a component\r\n * @param {Component} Component\r\n * @private\r\n */\r\nexport function getName(Component) {\r\n  return Component.name;\r\n}\r\n\r\n/**\r\n * Return a valid property name for the Component\r\n * @param {Component} Component\r\n * @private\r\n */\r\nexport function componentPropertyName(Component) {\r\n  return getName(Component);\r\n}\r\n\r\n/**\r\n * Get a key from a list of components\r\n * @param {Array(Component)} Components Array of components to generate the key\r\n * @private\r\n */\r\nexport function queryKey(Components) {\r\n  var ids = [];\r\n  for (var n = 0; n < Components.length; n++) {\r\n    var T = Components[n];\r\n\r\n    if (!componentRegistered(T)) {\r\n      throw new Error(`Tried to create a query with an unregistered component`);\r\n    }\r\n\r\n    if (typeof T === \"object\") {\r\n      var operator = T.operator === \"not\" ? \"!\" : T.operator;\r\n      ids.push(operator + T.Component._typeId);\r\n    } else {\r\n      ids.push(T._typeId);\r\n    }\r\n  }\r\n\r\n  return ids.sort().join(\"-\");\r\n}\r\n\r\n// Detector for browser's \"window\"\r\nexport const hasWindow = typeof window !== \"undefined\";\r\n\r\n// performance.now() \"polyfill\"\r\nexport const now =\r\n  hasWindow && typeof window.performance !== \"undefined\"\r\n    ? performance.now.bind(performance)\r\n    : Date.now.bind(Date);\r\n\r\nexport function componentRegistered(T) {\r\n  return (\r\n    (typeof T === \"object\" && T.Component._typeId !== undefined) ||\r\n    (T.isComponent && T._typeId !== undefined)\r\n  );\r\n}\r\n","import { now } from \"./Utils.js\";\r\n\r\nexport class SystemManager {\r\n  constructor(world) {\r\n    this._systems = [];\r\n    this._executeSystems = []; // Systems that have `execute` method\r\n    this.world = world;\r\n    this.lastExecutedSystem = null;\r\n  }\r\n\r\n  registerSystem(SystemClass, attributes) {\r\n    if (!SystemClass.isSystem) {\r\n      throw new Error(\r\n        `System '${SystemClass.name}' does not extend 'System' class`\r\n      );\r\n    }\r\n\r\n    if (this.getSystem(SystemClass) !== undefined) {\r\n      console.warn(`System '${SystemClass.getName()}' already registered.`);\r\n      return this;\r\n    }\r\n\r\n    var system = new SystemClass(this.world, attributes);\r\n    if (system.init) system.init(attributes);\r\n    system.order = this._systems.length;\r\n    this._systems.push(system);\r\n    if (system.execute) {\r\n      this._executeSystems.push(system);\r\n      this.sortSystems();\r\n    }\r\n    return this;\r\n  }\r\n\r\n  unregisterSystem(SystemClass) {\r\n    let system = this.getSystem(SystemClass);\r\n    if (system === undefined) {\r\n      console.warn(\r\n        `Can unregister system '${SystemClass.getName()}'. It doesn't exist.`\r\n      );\r\n      return this;\r\n    }\r\n\r\n    this._systems.splice(this._systems.indexOf(system), 1);\r\n\r\n    if (system.execute) {\r\n      this._executeSystems.splice(this._executeSystems.indexOf(system), 1);\r\n    }\r\n\r\n    // @todo Add system.unregister() call to free resources\r\n    return this;\r\n  }\r\n\r\n  sortSystems() {\r\n    this._executeSystems.sort((a, b) => {\r\n      return a.priority - b.priority || a.order - b.order;\r\n    });\r\n  }\r\n\r\n  getSystem(SystemClass) {\r\n    return this._systems.find((s) => s instanceof SystemClass);\r\n  }\r\n\r\n  getSystems() {\r\n    return this._systems;\r\n  }\r\n\r\n  removeSystem(SystemClass) {\r\n    var index = this._systems.indexOf(SystemClass);\r\n    if (!~index) return;\r\n\r\n    this._systems.splice(index, 1);\r\n  }\r\n\r\n  executeSystem(system, delta, time) {\r\n    if (system.initialized) {\r\n      if (system.canExecute()) {\r\n        let startTime = now();\r\n        system.execute(delta, time);\r\n        system.executeTime = now() - startTime;\r\n        this.lastExecutedSystem = system;\r\n        system.clearEvents();\r\n      }\r\n    }\r\n  }\r\n\r\n  stop() {\r\n    this._executeSystems.forEach((system) => system.stop());\r\n  }\r\n\r\n  execute(delta, time, forcePlay) {\r\n    this._executeSystems.forEach(\r\n      (system) =>\r\n        (forcePlay || system.enabled) && this.executeSystem(system, delta, time)\r\n    );\r\n  }\r\n\r\n  stats() {\r\n    var stats = {\r\n      numSystems: this._systems.length,\r\n      systems: {},\r\n    };\r\n\r\n    for (var i = 0; i < this._systems.length; i++) {\r\n      var system = this._systems[i];\r\n      var systemStats = (stats.systems[system.getName()] = {\r\n        queries: {},\r\n        executeTime: system.executeTime,\r\n      });\r\n      for (var name in system.ctx) {\r\n        systemStats.queries[name] = system.ctx[name].stats();\r\n      }\r\n    }\r\n\r\n    return stats;\r\n  }\r\n}\r\n","export class ObjectPool {\r\n  // @todo Add initial size\r\n  constructor(T, initialSize) {\r\n    this.freeList = [];\r\n    this.count = 0;\r\n    this.T = T;\r\n    this.isObjectPool = true;\r\n\r\n    if (typeof initialSize !== \"undefined\") {\r\n      this.expand(initialSize);\r\n    }\r\n  }\r\n\r\n  acquire() {\r\n    // Grow the list by 20%ish if we're out\r\n    if (this.freeList.length <= 0) {\r\n      this.expand(Math.round(this.count * 0.2) + 1);\r\n    }\r\n\r\n    var item = this.freeList.pop();\r\n\r\n    return item;\r\n  }\r\n\r\n  release(item) {\r\n    item.reset();\r\n    this.freeList.push(item);\r\n  }\r\n\r\n  expand(count) {\r\n    for (var n = 0; n < count; n++) {\r\n      var clone = new this.T();\r\n      clone._pool = this;\r\n      this.freeList.push(clone);\r\n    }\r\n    this.count += count;\r\n  }\r\n\r\n  totalSize() {\r\n    return this.count;\r\n  }\r\n\r\n  totalFree() {\r\n    return this.freeList.length;\r\n  }\r\n\r\n  totalUsed() {\r\n    return this.count - this.freeList.length;\r\n  }\r\n}\r\n","/**\r\n * @private\r\n * @class EventDispatcher\r\n */\r\nexport default class EventDispatcher {\r\n  constructor() {\r\n    this._listeners = {};\r\n    this.stats = {\r\n      fired: 0,\r\n      handled: 0,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Add an event listener\r\n   * @param {String} eventName Name of the event to listen\r\n   * @param {Function} listener Callback to trigger when the event is fired\r\n   */\r\n  addEventListener(eventName, listener) {\r\n    let listeners = this._listeners;\r\n    if (listeners[eventName] === undefined) {\r\n      listeners[eventName] = [];\r\n    }\r\n\r\n    if (listeners[eventName].indexOf(listener) === -1) {\r\n      listeners[eventName].push(listener);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check if an event listener is already added to the list of listeners\r\n   * @param {String} eventName Name of the event to check\r\n   * @param {Function} listener Callback for the specified event\r\n   */\r\n  hasEventListener(eventName, listener) {\r\n    return (\r\n      this._listeners[eventName] !== undefined &&\r\n      this._listeners[eventName].indexOf(listener) !== -1\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Remove an event listener\r\n   * @param {String} eventName Name of the event to remove\r\n   * @param {Function} listener Callback for the specified event\r\n   */\r\n  removeEventListener(eventName, listener) {\r\n    var listenerArray = this._listeners[eventName];\r\n    if (listenerArray !== undefined) {\r\n      var index = listenerArray.indexOf(listener);\r\n      if (index !== -1) {\r\n        listenerArray.splice(index, 1);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Dispatch an event\r\n   * @param {String} eventName Name of the event to dispatch\r\n   * @param {Entity} entity (Optional) Entity to emit\r\n   * @param {Component} component\r\n   */\r\n  dispatchEvent(eventName, entity, component) {\r\n    this.stats.fired++;\r\n\r\n    var listenerArray = this._listeners[eventName];\r\n    if (listenerArray !== undefined) {\r\n      var array = listenerArray.slice(0);\r\n\r\n      for (var i = 0; i < array.length; i++) {\r\n        array[i].call(this, entity, component);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Reset stats counters\r\n   */\r\n  resetCounters() {\r\n    this.stats.fired = this.stats.handled = 0;\r\n  }\r\n}\r\n","import EventDispatcher from \"./EventDispatcher.js\";\r\nimport { queryKey } from \"./Utils.js\";\r\n\r\nexport default class Query {\r\n  /**\r\n   * @param {Array(Component)} Components List of types of components to query\r\n   */\r\n  constructor(Components, manager) {\r\n    this.Components = [];\r\n    this.NotComponents = [];\r\n\r\n    Components.forEach((component) => {\r\n      if (typeof component === \"object\") {\r\n        this.NotComponents.push(component.Component);\r\n      } else {\r\n        this.Components.push(component);\r\n      }\r\n    });\r\n\r\n    if (this.Components.length === 0) {\r\n      throw new Error(\"Can't create a query without components\");\r\n    }\r\n\r\n    this.entities = [];\r\n\r\n    this.eventDispatcher = new EventDispatcher();\r\n\r\n    // This query is being used by a reactive system\r\n    this.reactive = false;\r\n\r\n    this.key = queryKey(Components);\r\n\r\n    // Fill the query with the existing entities\r\n    for (var i = 0; i < manager._entities.length; i++) {\r\n      var entity = manager._entities[i];\r\n      if (this.match(entity)) {\r\n        // @todo ??? this.addEntity(entity); => preventing the event to be generated\r\n        entity.queries.push(this);\r\n        this.entities.push(entity);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add entity to this query\r\n   * @param {Entity} entity\r\n   */\r\n  addEntity(entity) {\r\n    entity.queries.push(this);\r\n    this.entities.push(entity);\r\n\r\n    this.eventDispatcher.dispatchEvent(Query.prototype.ENTITY_ADDED, entity);\r\n  }\r\n\r\n  /**\r\n   * Remove entity from this query\r\n   * @param {Entity} entity\r\n   */\r\n  removeEntity(entity) {\r\n    let index = this.entities.indexOf(entity);\r\n    if (~index) {\r\n      this.entities.splice(index, 1);\r\n\r\n      index = entity.queries.indexOf(this);\r\n      entity.queries.splice(index, 1);\r\n\r\n      this.eventDispatcher.dispatchEvent(\r\n        Query.prototype.ENTITY_REMOVED,\r\n        entity\r\n      );\r\n    }\r\n  }\r\n\r\n  match(entity) {\r\n    return (\r\n      entity.hasAllComponents(this.Components) &&\r\n      !entity.hasAnyComponents(this.NotComponents)\r\n    );\r\n  }\r\n\r\n  toJSON() {\r\n    return {\r\n      key: this.key,\r\n      reactive: this.reactive,\r\n      components: {\r\n        included: this.Components.map((C) => C.name),\r\n        not: this.NotComponents.map((C) => C.name),\r\n      },\r\n      numEntities: this.entities.length,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Return stats for this query\r\n   */\r\n  stats() {\r\n    return {\r\n      numComponents: this.Components.length,\r\n      numEntities: this.entities.length,\r\n    };\r\n  }\r\n}\r\n\r\nQuery.prototype.ENTITY_ADDED = \"Query#ENTITY_ADDED\";\r\nQuery.prototype.ENTITY_REMOVED = \"Query#ENTITY_REMOVED\";\r\nQuery.prototype.COMPONENT_CHANGED = \"Query#COMPONENT_CHANGED\";\r\n","import Query from \"./Query.js\";\r\nimport { queryKey } from \"./Utils.js\";\r\n\r\n/**\r\n * @private\r\n * @class QueryManager\r\n */\r\nexport default class QueryManager {\r\n  constructor(world) {\r\n    this._world = world;\r\n\r\n    // Queries indexed by a unique identifier for the components it has\r\n    this._queries = {};\r\n  }\r\n\r\n  onEntityRemoved(entity) {\r\n    for (var queryName in this._queries) {\r\n      var query = this._queries[queryName];\r\n      if (entity.queries.indexOf(query) !== -1) {\r\n        query.removeEntity(entity);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Callback when a component is added to an entity\r\n   * @param {Entity} entity Entity that just got the new component\r\n   * @param {Component} Component Component added to the entity\r\n   */\r\n  onEntityComponentAdded(entity, Component) {\r\n    // @todo Use bitmask for checking components?\r\n\r\n    // Check each indexed query to see if we need to add this entity to the list\r\n    for (var queryName in this._queries) {\r\n      var query = this._queries[queryName];\r\n\r\n      if (\r\n        !!~query.NotComponents.indexOf(Component) &&\r\n        ~query.entities.indexOf(entity)\r\n      ) {\r\n        query.removeEntity(entity);\r\n        continue;\r\n      }\r\n\r\n      // Add the entity only if:\r\n      // Component is in the query\r\n      // and Entity has ALL the components of the query\r\n      // and Entity is not already in the query\r\n      if (\r\n        !~query.Components.indexOf(Component) ||\r\n        !query.match(entity) ||\r\n        ~query.entities.indexOf(entity)\r\n      )\r\n        continue;\r\n\r\n      query.addEntity(entity);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Callback when a component is removed from an entity\r\n   * @param {Entity} entity Entity to remove the component from\r\n   * @param {Component} Component Component to remove from the entity\r\n   */\r\n  onEntityComponentRemoved(entity, Component) {\r\n    for (var queryName in this._queries) {\r\n      var query = this._queries[queryName];\r\n\r\n      if (\r\n        !!~query.NotComponents.indexOf(Component) &&\r\n        !~query.entities.indexOf(entity) &&\r\n        query.match(entity)\r\n      ) {\r\n        query.addEntity(entity);\r\n        continue;\r\n      }\r\n\r\n      if (\r\n        !!~query.Components.indexOf(Component) &&\r\n        !!~query.entities.indexOf(entity) &&\r\n        !query.match(entity)\r\n      ) {\r\n        query.removeEntity(entity);\r\n        continue;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get a query for the specified components\r\n   * @param {Component} Components Components that the query should have\r\n   */\r\n  getQuery(Components) {\r\n    var key = queryKey(Components);\r\n    var query = this._queries[key];\r\n    if (!query) {\r\n      this._queries[key] = query = new Query(Components, this._world);\r\n    }\r\n    return query;\r\n  }\r\n\r\n  /**\r\n   * Return some stats from this class\r\n   */\r\n  stats() {\r\n    var stats = {};\r\n    for (var queryName in this._queries) {\r\n      stats[queryName] = this._queries[queryName].stats();\r\n    }\r\n    return stats;\r\n  }\r\n}\r\n","export class Component {\r\n  constructor(props) {\r\n    if (props !== false) {\r\n      const schema = this.constructor.schema;\r\n\r\n      for (const key in schema) {\r\n        if (props && props.hasOwnProperty(key)) {\r\n          this[key] = props[key];\r\n        } else {\r\n          const schemaProp = schema[key];\r\n          if (schemaProp.hasOwnProperty(\"default\")) {\r\n            this[key] = schemaProp.type.clone(schemaProp.default);\r\n          } else {\r\n            const type = schemaProp.type;\r\n            this[key] = type.clone(type.default);\r\n          }\r\n        }\r\n      }\r\n\r\n      if (process.env.NODE_ENV !== \"production\" && props !== undefined) {\r\n        this.checkUndefinedAttributes(props);\r\n      }\r\n    }\r\n\r\n    this._pool = null;\r\n  }\r\n\r\n  copy(source) {\r\n    const schema = this.constructor.schema;\r\n\r\n    for (const key in schema) {\r\n      const prop = schema[key];\r\n\r\n      if (source.hasOwnProperty(key)) {\r\n        this[key] = prop.type.copy(source[key], this[key]);\r\n      }\r\n    }\r\n\r\n    // @DEBUG\r\n    if (process.env.NODE_ENV !== \"production\") {\r\n      this.checkUndefinedAttributes(source);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  clone() {\r\n    return new this.constructor().copy(this);\r\n  }\r\n\r\n  reset() {\r\n    const schema = this.constructor.schema;\r\n\r\n    for (const key in schema) {\r\n      const schemaProp = schema[key];\r\n\r\n      if (schemaProp.hasOwnProperty(\"default\")) {\r\n        this[key] = schemaProp.type.copy(schemaProp.default, this[key]);\r\n      } else {\r\n        const type = schemaProp.type;\r\n        this[key] = type.copy(type.default, this[key]);\r\n      }\r\n    }\r\n  }\r\n\r\n  dispose() {\r\n    if (this._pool) {\r\n      this._pool.release(this);\r\n    }\r\n  }\r\n\r\n  getName() {\r\n    return this.constructor.getName();\r\n  }\r\n\r\n  checkUndefinedAttributes(src) {\r\n    const schema = this.constructor.schema;\r\n\r\n    // Check that the attributes defined in source are also defined in the schema\r\n    Object.keys(src).forEach((srcKey) => {\r\n      if (!schema.hasOwnProperty(srcKey)) {\r\n        console.warn(\r\n          `Trying to set attribute '${srcKey}' not defined in the '${this.constructor.name}' schema. Please fix the schema, the attribute value won't be set`\r\n        );\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nComponent.schema = {};\r\nComponent.isComponent = true;\r\nComponent.getName = function () {\r\n  return this.displayName || this.name;\r\n};\r\n","import { Component } from \"./Component.js\";\r\n\r\nexport class SystemStateComponent extends Component {}\r\n\r\nSystemStateComponent.isSystemStateComponent = true;\r\n","import { ObjectPool } from \"./ObjectPool.js\";\r\nimport QueryManager from \"./QueryManager.js\";\r\nimport EventDispatcher from \"./EventDispatcher.js\";\r\nimport { SystemStateComponent } from \"./SystemStateComponent.js\";\r\n\r\nclass EntityPool extends ObjectPool {\r\n  constructor(entityManager, entityClass, initialSize) {\r\n    super(entityClass, undefined);\r\n    this.entityManager = entityManager;\r\n\r\n    if (typeof initialSize !== \"undefined\") {\r\n      this.expand(initialSize);\r\n    }\r\n  }\r\n\r\n  expand(count) {\r\n    for (var n = 0; n < count; n++) {\r\n      var clone = new this.T(this.entityManager);\r\n      clone._pool = this;\r\n      this.freeList.push(clone);\r\n    }\r\n    this.count += count;\r\n  }\r\n}\r\n\r\n/**\r\n * @private\r\n * @class EntityManager\r\n */\r\nexport class EntityManager {\r\n  constructor(world) {\r\n    this.world = world;\r\n    this.componentsManager = world.componentsManager;\r\n\r\n    // All the entities in this instance\r\n    this._entities = [];\r\n    this._nextEntityId = 0;\r\n\r\n    this._entitiesByNames = {};\r\n\r\n    this._queryManager = new QueryManager(this);\r\n    this.eventDispatcher = new EventDispatcher();\r\n    this._entityPool = new EntityPool(\r\n      this,\r\n      this.world.options.entityClass,\r\n      this.world.options.entityPoolSize\r\n    );\r\n\r\n    // Deferred deletion\r\n    this.entitiesWithComponentsToRemove = [];\r\n    this.entitiesToRemove = [];\r\n    this.deferredRemovalEnabled = true;\r\n  }\r\n\r\n  getEntityByName(name) {\r\n    return this._entitiesByNames[name];\r\n  }\r\n\r\n  /**\r\n   * Create a new entity\r\n   */\r\n  createEntity(name) {\r\n    var entity = this._entityPool.acquire();\r\n    entity.alive = true;\r\n    entity.name = name || \"\";\r\n    if (name) {\r\n      if (this._entitiesByNames[name]) {\r\n        console.warn(`Entity name '${name}' already exist`);\r\n      } else {\r\n        this._entitiesByNames[name] = entity;\r\n      }\r\n    }\r\n\r\n    this._entities.push(entity);\r\n    this.eventDispatcher.dispatchEvent(ENTITY_CREATED, entity);\r\n    return entity;\r\n  }\r\n\r\n  // COMPONENTS\r\n\r\n  /**\r\n   * Add a component to an entity\r\n   * @param {Entity} entity Entity where the component will be added\r\n   * @param {Component} Component Component to be added to the entity\r\n   * @param {Object} values Optional values to replace the default attributes\r\n   */\r\n  entityAddComponent(entity, Component, values) {\r\n    // @todo Probably define Component._typeId with a default value and avoid using typeof\r\n    if (\r\n      typeof Component._typeId === \"undefined\" &&\r\n      !this.world.componentsManager._ComponentsMap[Component._typeId]\r\n    ) {\r\n      throw new Error(\r\n        `Attempted to add unregistered component \"${Component.getName()}\"`\r\n      );\r\n    }\r\n\r\n    if (~entity._ComponentTypes.indexOf(Component)) {\r\n      if (process.env.NODE_ENV !== \"production\") {\r\n        console.warn(\r\n          \"Component type already exists on entity.\",\r\n          entity,\r\n          Component.getName()\r\n        );\r\n      }\r\n      return;\r\n    }\r\n\r\n    entity._ComponentTypes.push(Component);\r\n\r\n    if (Component.__proto__ === SystemStateComponent) {\r\n      entity.numStateComponents++;\r\n    }\r\n\r\n    var componentPool = this.world.componentsManager.getComponentsPool(\r\n      Component\r\n    );\r\n\r\n    var component = componentPool\r\n      ? componentPool.acquire()\r\n      : new Component(values);\r\n\r\n    if (componentPool && values) {\r\n      component.copy(values);\r\n    }\r\n\r\n    entity._components[Component._typeId] = component;\r\n\r\n    this._queryManager.onEntityComponentAdded(entity, Component);\r\n    this.world.componentsManager.componentAddedToEntity(Component);\r\n\r\n    this.eventDispatcher.dispatchEvent(COMPONENT_ADDED, entity, Component);\r\n  }\r\n\r\n  /**\r\n   * Remove a component from an entity\r\n   * @param {Entity} entity Entity which will get removed the component\r\n   * @param {*} Component Component to remove from the entity\r\n   * @param {Bool} immediately If you want to remove the component immediately instead of deferred (Default is false)\r\n   */\r\n  entityRemoveComponent(entity, Component, immediately) {\r\n    var index = entity._ComponentTypes.indexOf(Component);\r\n    if (!~index) return;\r\n\r\n    this.eventDispatcher.dispatchEvent(COMPONENT_REMOVE, entity, Component);\r\n\r\n    if (immediately) {\r\n      this._entityRemoveComponentSync(entity, Component, index);\r\n    } else {\r\n      if (entity._ComponentTypesToRemove.length === 0)\r\n        this.entitiesWithComponentsToRemove.push(entity);\r\n\r\n      entity._ComponentTypes.splice(index, 1);\r\n      entity._ComponentTypesToRemove.push(Component);\r\n\r\n      entity._componentsToRemove[Component._typeId] =\r\n        entity._components[Component._typeId];\r\n      delete entity._components[Component._typeId];\r\n    }\r\n\r\n    // Check each indexed query to see if we need to remove it\r\n    this._queryManager.onEntityComponentRemoved(entity, Component);\r\n\r\n    if (Component.__proto__ === SystemStateComponent) {\r\n      entity.numStateComponents--;\r\n\r\n      // Check if the entity was a ghost waiting for the last system state component to be removed\r\n      if (entity.numStateComponents === 0 && !entity.alive) {\r\n        entity.remove();\r\n      }\r\n    }\r\n  }\r\n\r\n  _entityRemoveComponentSync(entity, Component, index) {\r\n    // Remove T listing on entity and property ref, then free the component.\r\n    entity._ComponentTypes.splice(index, 1);\r\n    var component = entity._components[Component._typeId];\r\n    delete entity._components[Component._typeId];\r\n    component.dispose();\r\n    this.world.componentsManager.componentRemovedFromEntity(Component);\r\n  }\r\n\r\n  /**\r\n   * Remove all the components from an entity\r\n   * @param {Entity} entity Entity from which the components will be removed\r\n   */\r\n  entityRemoveAllComponents(entity, immediately) {\r\n    let Components = entity._ComponentTypes;\r\n\r\n    for (let j = Components.length - 1; j >= 0; j--) {\r\n      if (Components[j].__proto__ !== SystemStateComponent)\r\n        this.entityRemoveComponent(entity, Components[j], immediately);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove the entity from this manager. It will clear also its components\r\n   * @param {Entity} entity Entity to remove from the manager\r\n   * @param {Bool} immediately If you want to remove the component immediately instead of deferred (Default is false)\r\n   */\r\n  removeEntity(entity, immediately) {\r\n    var index = this._entities.indexOf(entity);\r\n\r\n    if (!~index) throw new Error(\"Tried to remove entity not in list\");\r\n\r\n    entity.alive = false;\r\n    this.entityRemoveAllComponents(entity, immediately);\r\n\r\n    if (entity.numStateComponents === 0) {\r\n      // Remove from entity list\r\n      this.eventDispatcher.dispatchEvent(ENTITY_REMOVED, entity);\r\n      this._queryManager.onEntityRemoved(entity);\r\n      if (immediately === true) {\r\n        this._releaseEntity(entity, index);\r\n      } else {\r\n        this.entitiesToRemove.push(entity);\r\n      }\r\n    }\r\n  }\r\n\r\n  _releaseEntity(entity, index) {\r\n    this._entities.splice(index, 1);\r\n\r\n    if (this._entitiesByNames[entity.name]) {\r\n      delete this._entitiesByNames[entity.name];\r\n    }\r\n    entity._pool.release(entity);\r\n  }\r\n\r\n  /**\r\n   * Remove all entities from this manager\r\n   */\r\n  removeAllEntities() {\r\n    for (var i = this._entities.length - 1; i >= 0; i--) {\r\n      this.removeEntity(this._entities[i]);\r\n    }\r\n  }\r\n\r\n  processDeferredRemoval() {\r\n    if (!this.deferredRemovalEnabled) {\r\n      return;\r\n    }\r\n\r\n    for (let i = 0; i < this.entitiesToRemove.length; i++) {\r\n      let entity = this.entitiesToRemove[i];\r\n      let index = this._entities.indexOf(entity);\r\n      this._releaseEntity(entity, index);\r\n    }\r\n    this.entitiesToRemove.length = 0;\r\n\r\n    for (let i = 0; i < this.entitiesWithComponentsToRemove.length; i++) {\r\n      let entity = this.entitiesWithComponentsToRemove[i];\r\n      while (entity._ComponentTypesToRemove.length > 0) {\r\n        let Component = entity._ComponentTypesToRemove.pop();\r\n\r\n        var component = entity._componentsToRemove[Component._typeId];\r\n        delete entity._componentsToRemove[Component._typeId];\r\n        component.dispose();\r\n        this.world.componentsManager.componentRemovedFromEntity(Component);\r\n\r\n        //this._entityRemoveComponentSync(entity, Component, index);\r\n      }\r\n    }\r\n\r\n    this.entitiesWithComponentsToRemove.length = 0;\r\n  }\r\n\r\n  /**\r\n   * Get a query based on a list of components\r\n   * @param {Array(Component)} Components List of components that will form the query\r\n   */\r\n  queryComponents(Components) {\r\n    return this._queryManager.getQuery(Components);\r\n  }\r\n\r\n  // EXTRAS\r\n\r\n  /**\r\n   * Return number of entities\r\n   */\r\n  count() {\r\n    return this._entities.length;\r\n  }\r\n\r\n  /**\r\n   * Return some stats\r\n   */\r\n  stats() {\r\n    var stats = {\r\n      numEntities: this._entities.length,\r\n      numQueries: Object.keys(this._queryManager._queries).length,\r\n      queries: this._queryManager.stats(),\r\n      numComponentPool: Object.keys(this.componentsManager._componentPool)\r\n        .length,\r\n      componentPool: {},\r\n      eventDispatcher: this.eventDispatcher.stats,\r\n    };\r\n\r\n    for (var ecsyComponentId in this.componentsManager._componentPool) {\r\n      var pool = this.componentsManager._componentPool[ecsyComponentId];\r\n      stats.componentPool[pool.T.getName()] = {\r\n        used: pool.totalUsed(),\r\n        size: pool.count,\r\n      };\r\n    }\r\n\r\n    return stats;\r\n  }\r\n}\r\n\r\nconst ENTITY_CREATED = \"EntityManager#ENTITY_CREATE\";\r\nconst ENTITY_REMOVED = \"EntityManager#ENTITY_REMOVED\";\r\nconst COMPONENT_ADDED = \"EntityManager#COMPONENT_ADDED\";\r\nconst COMPONENT_REMOVE = \"EntityManager#COMPONENT_REMOVE\";\r\n","import { ObjectPool } from \"./ObjectPool.js\";\r\n\r\nexport class ComponentManager {\r\n  constructor() {\r\n    this.Components = [];\r\n    this._ComponentsMap = {};\r\n\r\n    this._componentPool = {};\r\n    this.numComponents = {};\r\n    this.nextComponentId = 0;\r\n  }\r\n\r\n  hasComponent(Component) {\r\n    return this.Components.indexOf(Component) !== -1;\r\n  }\r\n\r\n  registerComponent(Component, objectPool) {\r\n    if (this.Components.indexOf(Component) !== -1) {\r\n      console.warn(\r\n        `Component type: '${Component.getName()}' already registered.`\r\n      );\r\n      return;\r\n    }\r\n\r\n    const schema = Component.schema;\r\n\r\n    if (!schema) {\r\n      throw new Error(\r\n        `Component \"${Component.getName()}\" has no schema property.`\r\n      );\r\n    }\r\n\r\n    for (const propName in schema) {\r\n      const prop = schema[propName];\r\n\r\n      if (!prop.type) {\r\n        throw new Error(\r\n          `Invalid schema for component \"${Component.getName()}\". Missing type for \"${propName}\" property.`\r\n        );\r\n      }\r\n    }\r\n\r\n    Component._typeId = this.nextComponentId++;\r\n    this.Components.push(Component);\r\n    this._ComponentsMap[Component._typeId] = Component;\r\n    this.numComponents[Component._typeId] = 0;\r\n\r\n    if (objectPool === undefined) {\r\n      objectPool = new ObjectPool(Component);\r\n    } else if (objectPool === false) {\r\n      objectPool = undefined;\r\n    }\r\n\r\n    this._componentPool[Component._typeId] = objectPool;\r\n  }\r\n\r\n  componentAddedToEntity(Component) {\r\n    this.numComponents[Component._typeId]++;\r\n  }\r\n\r\n  componentRemovedFromEntity(Component) {\r\n    this.numComponents[Component._typeId]--;\r\n  }\r\n\r\n  getComponentsPool(Component) {\r\n    return this._componentPool[Component._typeId];\r\n  }\r\n}\r\n","export const Version = \"0.3.1\";\r\n","import Query from \"./Query.js\";\r\nimport wrapImmutableComponent from \"./WrapImmutableComponent.js\";\r\n\r\nexport class Entity {\r\n  constructor(entityManager) {\r\n    this._entityManager = entityManager || null;\r\n\r\n    // Unique ID for this entity\r\n    this.id = entityManager._nextEntityId++;\r\n\r\n    // List of components types the entity has\r\n    this._ComponentTypes = [];\r\n\r\n    // Instance of the components\r\n    this._components = {};\r\n\r\n    this._componentsToRemove = {};\r\n\r\n    // Queries where the entity is added\r\n    this.queries = [];\r\n\r\n    // Used for deferred removal\r\n    this._ComponentTypesToRemove = [];\r\n\r\n    this.alive = false;\r\n\r\n    //if there are state components on a entity, it can't be removed completely\r\n    this.numStateComponents = 0;\r\n  }\r\n\r\n  // COMPONENTS\r\n\r\n  getComponent(Component, includeRemoved) {\r\n    var component = this._components[Component._typeId];\r\n\r\n    if (!component && includeRemoved === true) {\r\n      component = this._componentsToRemove[Component._typeId];\r\n    }\r\n\r\n    return process.env.NODE_ENV !== \"production\"\r\n      ? wrapImmutableComponent(Component, component)\r\n      : component;\r\n  }\r\n\r\n  getRemovedComponent(Component) {\r\n    const component = this._componentsToRemove[Component._typeId];\r\n\r\n    return process.env.NODE_ENV !== \"production\"\r\n      ? wrapImmutableComponent(Component, component)\r\n      : component;\r\n  }\r\n\r\n  getComponents() {\r\n    return this._components;\r\n  }\r\n\r\n  getComponentsToRemove() {\r\n    return this._componentsToRemove;\r\n  }\r\n\r\n  getComponentTypes() {\r\n    return this._ComponentTypes;\r\n  }\r\n\r\n  getMutableComponent(Component) {\r\n    var component = this._components[Component._typeId];\r\n\r\n    if (!component) {\r\n      return;\r\n    }\r\n\r\n    for (var i = 0; i < this.queries.length; i++) {\r\n      var query = this.queries[i];\r\n      // @todo accelerate this check. Maybe having query._Components as an object\r\n      // @todo add Not components\r\n      if (query.reactive && query.Components.indexOf(Component) !== -1) {\r\n        query.eventDispatcher.dispatchEvent(\r\n          Query.prototype.COMPONENT_CHANGED,\r\n          this,\r\n          component\r\n        );\r\n      }\r\n    }\r\n    return component;\r\n  }\r\n\r\n  addComponent(Component, values) {\r\n    this._entityManager.entityAddComponent(this, Component, values);\r\n    return this;\r\n  }\r\n\r\n  removeComponent(Component, forceImmediate) {\r\n    this._entityManager.entityRemoveComponent(this, Component, forceImmediate);\r\n    return this;\r\n  }\r\n\r\n  hasComponent(Component, includeRemoved) {\r\n    return (\r\n      !!~this._ComponentTypes.indexOf(Component) ||\r\n      (includeRemoved === true && this.hasRemovedComponent(Component))\r\n    );\r\n  }\r\n\r\n  hasRemovedComponent(Component) {\r\n    return !!~this._ComponentTypesToRemove.indexOf(Component);\r\n  }\r\n\r\n  hasAllComponents(Components) {\r\n    for (var i = 0; i < Components.length; i++) {\r\n      if (!this.hasComponent(Components[i])) return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  hasAnyComponents(Components) {\r\n    for (var i = 0; i < Components.length; i++) {\r\n      if (this.hasComponent(Components[i])) return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  removeAllComponents(forceImmediate) {\r\n    return this._entityManager.entityRemoveAllComponents(this, forceImmediate);\r\n  }\r\n\r\n  copy(src) {\r\n    // TODO: This can definitely be optimized\r\n    for (var ecsyComponentId in src._components) {\r\n      var srcComponent = src._components[ecsyComponentId];\r\n      this.addComponent(srcComponent.constructor);\r\n      var component = this.getComponent(srcComponent.constructor);\r\n      component.copy(srcComponent);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  clone() {\r\n    return new Entity(this._entityManager).copy(this);\r\n  }\r\n\r\n  reset() {\r\n    this.id = this._entityManager._nextEntityId++;\r\n    this._ComponentTypes.length = 0;\r\n    this.queries.length = 0;\r\n\r\n    for (var ecsyComponentId in this._components) {\r\n      delete this._components[ecsyComponentId];\r\n    }\r\n  }\r\n\r\n  remove(forceImmediate) {\r\n    return this._entityManager.removeEntity(this, forceImmediate);\r\n  }\r\n}\r\n","import { SystemManager } from \"./SystemManager.js\";\r\nimport { EntityManager } from \"./EntityManager.js\";\r\nimport { ComponentManager } from \"./ComponentManager.js\";\r\nimport { Version } from \"./Version.js\";\r\nimport { hasWindow, now } from \"./Utils.js\";\r\nimport { Entity } from \"./Entity.js\";\r\n\r\nconst DEFAULT_OPTIONS = {\r\n  entityPoolSize: 0,\r\n  entityClass: Entity,\r\n};\r\n\r\nexport class World {\r\n  constructor(options = {}) {\r\n    this.options = Object.assign({}, DEFAULT_OPTIONS, options);\r\n\r\n    this.componentsManager = new ComponentManager(this);\r\n    this.entityManager = new EntityManager(this);\r\n    this.systemManager = new SystemManager(this);\r\n\r\n    this.enabled = true;\r\n\r\n    this.eventQueues = {};\r\n\r\n    if (hasWindow && typeof CustomEvent !== \"undefined\") {\r\n      var event = new CustomEvent(\"ecsy-world-created\", {\r\n        detail: { world: this, version: Version },\r\n      });\r\n      window.dispatchEvent(event);\r\n    }\r\n\r\n    this.lastTime = now() / 1000;\r\n  }\r\n\r\n  registerComponent(Component, objectPool) {\r\n    this.componentsManager.registerComponent(Component, objectPool);\r\n    return this;\r\n  }\r\n\r\n  registerSystem(System, attributes) {\r\n    this.systemManager.registerSystem(System, attributes);\r\n    return this;\r\n  }\r\n\r\n  hasRegisteredComponent(Component) {\r\n    return this.componentsManager.hasComponent(Component);\r\n  }\r\n\r\n  unregisterSystem(System) {\r\n    this.systemManager.unregisterSystem(System);\r\n    return this;\r\n  }\r\n\r\n  getSystem(SystemClass) {\r\n    return this.systemManager.getSystem(SystemClass);\r\n  }\r\n\r\n  getSystems() {\r\n    return this.systemManager.getSystems();\r\n  }\r\n\r\n  execute(delta, time) {\r\n    if (!delta) {\r\n      time = now() / 1000;\r\n      delta = time - this.lastTime;\r\n      this.lastTime = time;\r\n    }\r\n\r\n    if (this.enabled) {\r\n      this.systemManager.execute(delta, time);\r\n      this.entityManager.processDeferredRemoval();\r\n    }\r\n  }\r\n\r\n  stop() {\r\n    this.enabled = false;\r\n  }\r\n\r\n  play() {\r\n    this.enabled = true;\r\n  }\r\n\r\n  createEntity(name) {\r\n    return this.entityManager.createEntity(name);\r\n  }\r\n\r\n  stats() {\r\n    var stats = {\r\n      entities: this.entityManager.stats(),\r\n      system: this.systemManager.stats(),\r\n    };\r\n\r\n    return stats;\r\n  }\r\n}\r\n","import Query from \"./Query.js\";\r\nimport { componentRegistered } from \"./Utils.js\";\r\n\r\nexport class System {\r\n  canExecute() {\r\n    if (this._mandatoryQueries.length === 0) return true;\r\n\r\n    for (let i = 0; i < this._mandatoryQueries.length; i++) {\r\n      var query = this._mandatoryQueries[i];\r\n      if (query.entities.length === 0) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  getName() {\r\n    return this.constructor.getName();\r\n  }\r\n\r\n  constructor(world, attributes) {\r\n    this.world = world;\r\n    this.enabled = true;\r\n\r\n    // @todo Better naming :)\r\n    this._queries = {};\r\n    this.queries = {};\r\n\r\n    this.priority = 0;\r\n\r\n    // Used for stats\r\n    this.executeTime = 0;\r\n\r\n    if (attributes && attributes.priority) {\r\n      this.priority = attributes.priority;\r\n    }\r\n\r\n    this._mandatoryQueries = [];\r\n\r\n    this.initialized = true;\r\n\r\n    if (this.constructor.queries) {\r\n      for (var queryName in this.constructor.queries) {\r\n        var queryConfig = this.constructor.queries[queryName];\r\n        var Components = queryConfig.components;\r\n        if (!Components || Components.length === 0) {\r\n          throw new Error(\"'components' attribute can't be empty in a query\");\r\n        }\r\n\r\n        // Detect if the components have already been registered\r\n        let unregisteredComponents = Components.filter(\r\n          (Component) => !componentRegistered(Component)\r\n        );\r\n\r\n        if (unregisteredComponents.length > 0) {\r\n          throw new Error(\r\n            `Tried to create a query '${\r\n              this.constructor.name\r\n            }.${queryName}' with unregistered components: [${unregisteredComponents\r\n              .map((c) => c.getName())\r\n              .join(\", \")}]`\r\n          );\r\n        }\r\n\r\n        var query = this.world.entityManager.queryComponents(Components);\r\n\r\n        this._queries[queryName] = query;\r\n        if (queryConfig.mandatory === true) {\r\n          this._mandatoryQueries.push(query);\r\n        }\r\n        this.queries[queryName] = {\r\n          results: query.entities,\r\n        };\r\n\r\n        // Reactive configuration added/removed/changed\r\n        var validEvents = [\"added\", \"removed\", \"changed\"];\r\n\r\n        const eventMapping = {\r\n          added: Query.prototype.ENTITY_ADDED,\r\n          removed: Query.prototype.ENTITY_REMOVED,\r\n          changed: Query.prototype.COMPONENT_CHANGED, // Query.prototype.ENTITY_CHANGED\r\n        };\r\n\r\n        if (queryConfig.listen) {\r\n          validEvents.forEach((eventName) => {\r\n            if (!this.execute) {\r\n              console.warn(\r\n                `System '${this.getName()}' has defined listen events (${validEvents.join(\r\n                  \", \"\r\n                )}) for query '${queryName}' but it does not implement the 'execute' method.`\r\n              );\r\n            }\r\n\r\n            // Is the event enabled on this system's query?\r\n            if (queryConfig.listen[eventName]) {\r\n              let event = queryConfig.listen[eventName];\r\n\r\n              if (eventName === \"changed\") {\r\n                query.reactive = true;\r\n                if (event === true) {\r\n                  // Any change on the entity from the components in the query\r\n                  let eventList = (this.queries[queryName][eventName] = []);\r\n                  query.eventDispatcher.addEventListener(\r\n                    Query.prototype.COMPONENT_CHANGED,\r\n                    (entity) => {\r\n                      // Avoid duplicates\r\n                      if (eventList.indexOf(entity) === -1) {\r\n                        eventList.push(entity);\r\n                      }\r\n                    }\r\n                  );\r\n                } else if (Array.isArray(event)) {\r\n                  let eventList = (this.queries[queryName][eventName] = []);\r\n                  query.eventDispatcher.addEventListener(\r\n                    Query.prototype.COMPONENT_CHANGED,\r\n                    (entity, changedComponent) => {\r\n                      // Avoid duplicates\r\n                      if (\r\n                        event.indexOf(changedComponent.constructor) !== -1 &&\r\n                        eventList.indexOf(entity) === -1\r\n                      ) {\r\n                        eventList.push(entity);\r\n                      }\r\n                    }\r\n                  );\r\n                } else {\r\n                  /*\r\n                  // Checking just specific components\r\n                  let changedList = (this.queries[queryName][eventName] = {});\r\n                  event.forEach(component => {\r\n                    let eventList = (changedList[\r\n                      componentPropertyName(component)\r\n                    ] = []);\r\n                    query.eventDispatcher.addEventListener(\r\n                      Query.prototype.COMPONENT_CHANGED,\r\n                      (entity, changedComponent) => {\r\n                        if (\r\n                          changedComponent.constructor === component &&\r\n                          eventList.indexOf(entity) === -1\r\n                        ) {\r\n                          eventList.push(entity);\r\n                        }\r\n                      }\r\n                    );\r\n                  });\r\n                  */\r\n                }\r\n              } else {\r\n                let eventList = (this.queries[queryName][eventName] = []);\r\n\r\n                query.eventDispatcher.addEventListener(\r\n                  eventMapping[eventName],\r\n                  (entity) => {\r\n                    // @fixme overhead?\r\n                    if (eventList.indexOf(entity) === -1)\r\n                      eventList.push(entity);\r\n                  }\r\n                );\r\n              }\r\n            }\r\n          });\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  stop() {\r\n    this.executeTime = 0;\r\n    this.enabled = false;\r\n  }\r\n\r\n  play() {\r\n    this.enabled = true;\r\n  }\r\n\r\n  // @question rename to clear queues?\r\n  clearEvents() {\r\n    for (let queryName in this.queries) {\r\n      var query = this.queries[queryName];\r\n      if (query.added) {\r\n        query.added.length = 0;\r\n      }\r\n      if (query.removed) {\r\n        query.removed.length = 0;\r\n      }\r\n      if (query.changed) {\r\n        if (Array.isArray(query.changed)) {\r\n          query.changed.length = 0;\r\n        } else {\r\n          for (let name in query.changed) {\r\n            query.changed[name].length = 0;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  toJSON() {\r\n    var json = {\r\n      name: this.getName(),\r\n      enabled: this.enabled,\r\n      executeTime: this.executeTime,\r\n      priority: this.priority,\r\n      queries: {},\r\n    };\r\n\r\n    if (this.constructor.queries) {\r\n      var queries = this.constructor.queries;\r\n      for (let queryName in queries) {\r\n        let query = this.queries[queryName];\r\n        let queryDefinition = queries[queryName];\r\n        let jsonQuery = (json.queries[queryName] = {\r\n          key: this._queries[queryName].key,\r\n        });\r\n\r\n        jsonQuery.mandatory = queryDefinition.mandatory === true;\r\n        jsonQuery.reactive =\r\n          queryDefinition.listen &&\r\n          (queryDefinition.listen.added === true ||\r\n            queryDefinition.listen.removed === true ||\r\n            queryDefinition.listen.changed === true ||\r\n            Array.isArray(queryDefinition.listen.changed));\r\n\r\n        if (jsonQuery.reactive) {\r\n          jsonQuery.listen = {};\r\n\r\n          const methods = [\"added\", \"removed\", \"changed\"];\r\n          methods.forEach((method) => {\r\n            if (query[method]) {\r\n              jsonQuery.listen[method] = {\r\n                entities: query[method].length,\r\n              };\r\n            }\r\n          });\r\n        }\r\n      }\r\n    }\r\n\r\n    return json;\r\n  }\r\n}\r\n\r\nSystem.isSystem = true;\r\nSystem.getName = function () {\r\n  return this.displayName || this.name;\r\n};\r\n\r\nexport function Not(Component) {\r\n  return {\r\n    operator: \"not\",\r\n    Component: Component,\r\n  };\r\n}\r\n","import { Component } from \"./Component.js\";\r\n\r\nexport class TagComponent extends Component {\r\n  constructor() {\r\n    super(false);\r\n  }\r\n}\r\n\r\nTagComponent.isTagComponent = true;\r\n","export const copyValue = (src) => src;\r\n\r\nexport const cloneValue = (src) => src;\r\n\r\nexport const copyArray = (src, dest) => {\r\n  if (!src) {\r\n    return src;\r\n  }\r\n\r\n  if (!dest) {\r\n    return src.slice();\r\n  }\r\n\r\n  dest.length = 0;\r\n\r\n  for (let i = 0; i < src.length; i++) {\r\n    dest.push(src[i]);\r\n  }\r\n\r\n  return dest;\r\n};\r\n\r\nexport const cloneArray = (src) => src && src.slice();\r\n\r\nexport const copyJSON = (src) => JSON.parse(JSON.stringify(src));\r\n\r\nexport const cloneJSON = (src) => JSON.parse(JSON.stringify(src));\r\n\r\nexport const copyCopyable = (src, dest) => {\r\n  if (!src) {\r\n    return src;\r\n  }\r\n\r\n  if (!dest) {\r\n    return src.clone();\r\n  }\r\n\r\n  return dest.copy(src);\r\n};\r\n\r\nexport const cloneClonable = (src) => src && src.clone();\r\n\r\nexport function createType(typeDefinition) {\r\n  var mandatoryProperties = [\"name\", \"default\", \"copy\", \"clone\"];\r\n\r\n  var undefinedProperties = mandatoryProperties.filter((p) => {\r\n    return !typeDefinition.hasOwnProperty(p);\r\n  });\r\n\r\n  if (undefinedProperties.length > 0) {\r\n    throw new Error(\r\n      `createType expects a type definition with the following properties: ${undefinedProperties.join(\r\n        \", \"\r\n      )}`\r\n    );\r\n  }\r\n\r\n  typeDefinition.isType = true;\r\n\r\n  return typeDefinition;\r\n}\r\n\r\n/**\r\n * Standard types\r\n */\r\nexport const Types = {\r\n  Number: createType({\r\n    name: \"Number\",\r\n    default: 0,\r\n    copy: copyValue,\r\n    clone: cloneValue,\r\n  }),\r\n\r\n  Boolean: createType({\r\n    name: \"Boolean\",\r\n    default: false,\r\n    copy: copyValue,\r\n    clone: cloneValue,\r\n  }),\r\n\r\n  String: createType({\r\n    name: \"String\",\r\n    default: \"\",\r\n    copy: copyValue,\r\n    clone: cloneValue,\r\n  }),\r\n\r\n  Array: createType({\r\n    name: \"Array\",\r\n    default: [],\r\n    copy: copyArray,\r\n    clone: cloneArray,\r\n  }),\r\n\r\n  Ref: createType({\r\n    name: \"Ref\",\r\n    default: undefined,\r\n    copy: copyValue,\r\n    clone: cloneValue,\r\n  }),\r\n\r\n  JSON: createType({\r\n    name: \"JSON\",\r\n    default: null,\r\n    copy: copyJSON,\r\n    clone: cloneJSON,\r\n  }),\r\n};\r\n","export function generateId(length) {\r\n  var result = \"\";\r\n  var characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\r\n  var charactersLength = characters.length;\r\n  for (var i = 0; i < length; i++) {\r\n    result += characters.charAt(Math.floor(Math.random() * charactersLength));\r\n  }\r\n  return result;\r\n}\r\n\r\nexport function injectScript(src, onLoad) {\r\n  var script = document.createElement(\"script\");\r\n  // @todo Use link to the ecsy-devtools repo?\r\n  script.src = src;\r\n  script.onload = onLoad;\r\n  (document.head || document.documentElement).appendChild(script);\r\n}\r\n","/* global Peer */\r\nimport { injectScript, generateId } from \"./utils.js\";\r\nimport { hasWindow } from \"../Utils.js\";\r\n\r\nfunction hookConsoleAndErrors(connection) {\r\n  var wrapFunctions = [\"error\", \"warning\", \"log\"];\r\n  wrapFunctions.forEach((key) => {\r\n    if (typeof console[key] === \"function\") {\r\n      var fn = console[key].bind(console);\r\n      console[key] = (...args) => {\r\n        connection.send({\r\n          method: \"console\",\r\n          type: key,\r\n          args: JSON.stringify(args),\r\n        });\r\n        return fn.apply(null, args);\r\n      };\r\n    }\r\n  });\r\n\r\n  window.addEventListener(\"error\", (error) => {\r\n    connection.send({\r\n      method: \"error\",\r\n      error: JSON.stringify({\r\n        message: error.error.message,\r\n        stack: error.error.stack,\r\n      }),\r\n    });\r\n  });\r\n}\r\n\r\nfunction includeRemoteIdHTML(remoteId) {\r\n  let infoDiv = document.createElement(\"div\");\r\n  infoDiv.style.cssText = `\r\n    align-items: center;\r\n    background-color: #333;\r\n    color: #aaa;\r\n    display:flex;\r\n    font-family: Arial;\r\n    font-size: 1.1em;\r\n    height: 40px;\r\n    justify-content: center;\r\n    left: 0;\r\n    opacity: 0.9;\r\n    position: absolute;\r\n    right: 0;\r\n    text-align: center;\r\n    top: 0;\r\n  `;\r\n\r\n  infoDiv.innerHTML = `Open ECSY devtools to connect to this page using the code:&nbsp;<b style=\"color: #fff\">${remoteId}</b>&nbsp;<button onClick=\"generateNewCode()\">Generate new code</button>`;\r\n  document.body.appendChild(infoDiv);\r\n\r\n  return infoDiv;\r\n}\r\n\r\nexport function enableRemoteDevtools(remoteId) {\r\n  if (!hasWindow) {\r\n    console.warn(\"Remote devtools not available outside the browser\");\r\n    return;\r\n  }\r\n\r\n  window.generateNewCode = () => {\r\n    window.localStorage.clear();\r\n    remoteId = generateId(6);\r\n    window.localStorage.setItem(\"ecsyRemoteId\", remoteId);\r\n    window.location.reload(false);\r\n  };\r\n\r\n  remoteId = remoteId || window.localStorage.getItem(\"ecsyRemoteId\");\r\n  if (!remoteId) {\r\n    remoteId = generateId(6);\r\n    window.localStorage.setItem(\"ecsyRemoteId\", remoteId);\r\n  }\r\n\r\n  let infoDiv = includeRemoteIdHTML(remoteId);\r\n\r\n  window.__ECSY_REMOTE_DEVTOOLS_INJECTED = true;\r\n  window.__ECSY_REMOTE_DEVTOOLS = {};\r\n\r\n  let Version = \"\";\r\n\r\n  // This is used to collect the worlds created before the communication is being established\r\n  let worldsBeforeLoading = [];\r\n  let onWorldCreated = (e) => {\r\n    var world = e.detail.world;\r\n    Version = e.detail.version;\r\n    worldsBeforeLoading.push(world);\r\n  };\r\n  window.addEventListener(\"ecsy-world-created\", onWorldCreated);\r\n\r\n  let onLoaded = () => {\r\n    // var peer = new Peer(remoteId);\r\n    var peer = new Peer(remoteId, {\r\n      host: \"peerjs.ecsy.io\",\r\n      secure: true,\r\n      port: 443,\r\n      config: {\r\n        iceServers: [\r\n          { url: \"stun:stun.l.google.com:19302\" },\r\n          { url: \"stun:stun1.l.google.com:19302\" },\r\n          { url: \"stun:stun2.l.google.com:19302\" },\r\n          { url: \"stun:stun3.l.google.com:19302\" },\r\n          { url: \"stun:stun4.l.google.com:19302\" },\r\n        ],\r\n      },\r\n      debug: 3,\r\n    });\r\n\r\n    peer.on(\"open\", (/* id */) => {\r\n      peer.on(\"connection\", (connection) => {\r\n        window.__ECSY_REMOTE_DEVTOOLS.connection = connection;\r\n        connection.on(\"open\", function () {\r\n          // infoDiv.style.visibility = \"hidden\";\r\n          infoDiv.innerHTML = \"Connected\";\r\n\r\n          // Receive messages\r\n          connection.on(\"data\", function (data) {\r\n            if (data.type === \"init\") {\r\n              var script = document.createElement(\"script\");\r\n              script.setAttribute(\"type\", \"text/javascript\");\r\n              script.onload = () => {\r\n                script.parentNode.removeChild(script);\r\n\r\n                // Once the script is injected we don't need to listen\r\n                window.removeEventListener(\r\n                  \"ecsy-world-created\",\r\n                  onWorldCreated\r\n                );\r\n                worldsBeforeLoading.forEach((world) => {\r\n                  var event = new CustomEvent(\"ecsy-world-created\", {\r\n                    detail: { world: world, version: Version },\r\n                  });\r\n                  window.dispatchEvent(event);\r\n                });\r\n              };\r\n              script.innerHTML = data.script;\r\n              (document.head || document.documentElement).appendChild(script);\r\n              script.onload();\r\n\r\n              hookConsoleAndErrors(connection);\r\n            } else if (data.type === \"executeScript\") {\r\n              let value = eval(data.script);\r\n              if (data.returnEval) {\r\n                connection.send({\r\n                  method: \"evalReturn\",\r\n                  value: value,\r\n                });\r\n              }\r\n            }\r\n          });\r\n        });\r\n      });\r\n    });\r\n  };\r\n\r\n  // Inject PeerJS script\r\n  injectScript(\r\n    \"https://cdn.jsdelivr.net/npm/peerjs@0.3.20/dist/peer.min.js\",\r\n    onLoaded\r\n  );\r\n}\r\n\r\nif (hasWindow) {\r\n  const urlParams = new URLSearchParams(window.location.search);\r\n\r\n  // @todo Provide a way to disable it if needed\r\n  if (urlParams.has(\"enable-remote-devtools\")) {\r\n    enableRemoteDevtools();\r\n  }\r\n}\r\n"],"names":["queryKey","Components","ids","n","length","T","componentRegistered","Error","operator","push","Component","_typeId","sort","join","hasWindow","window","now","performance","bind","Date","undefined","isComponent","SystemManager","[object Object]","world","this","_systems","_executeSystems","lastExecutedSystem","SystemClass","attributes","isSystem","name","getSystem","console","warn","getName","system","init","order","execute","sortSystems","splice","indexOf","a","b","priority","find","s","index","delta","time","initialized","canExecute","startTime","executeTime","clearEvents","forEach","stop","forcePlay","enabled","executeSystem","stats","numSystems","systems","i","systemStats","queries","ctx","ObjectPool","initialSize","freeList","count","isObjectPool","expand","Math","round","pop","item","reset","clone","_pool","EventDispatcher","_listeners","fired","handled","eventName","listener","listeners","listenerArray","entity","component","array","slice","call","Query","manager","NotComponents","entities","eventDispatcher","reactive","key","_entities","match","dispatchEvent","prototype","ENTITY_ADDED","ENTITY_REMOVED","hasAllComponents","hasAnyComponents","components","included","map","C","not","numEntities","numComponents","COMPONENT_CHANGED","QueryManager","_world","_queries","queryName","query","removeEntity","addEntity","props","schema","constructor","hasOwnProperty","schemaProp","type","default","source","prop","copy","release","src","Object","keys","srcKey","displayName","SystemStateComponent","isSystemStateComponent","EntityPool","entityManager","entityClass","super","EntityManager","componentsManager","_nextEntityId","_entitiesByNames","_queryManager","_entityPool","options","entityPoolSize","entitiesWithComponentsToRemove","entitiesToRemove","deferredRemovalEnabled","acquire","alive","ENTITY_CREATED","values","_ComponentsMap","_ComponentTypes","__proto__","numStateComponents","componentPool","getComponentsPool","_components","onEntityComponentAdded","componentAddedToEntity","COMPONENT_ADDED","immediately","COMPONENT_REMOVE","_entityRemoveComponentSync","_ComponentTypesToRemove","_componentsToRemove","onEntityComponentRemoved","remove","dispose","componentRemovedFromEntity","j","entityRemoveComponent","entityRemoveAllComponents","onEntityRemoved","_releaseEntity","getQuery","numQueries","numComponentPool","_componentPool","ecsyComponentId","pool","used","totalUsed","size","ComponentManager","nextComponentId","objectPool","propName","Version","Entity","_entityManager","id","includeRemoved","entityAddComponent","forceImmediate","hasRemovedComponent","hasComponent","srcComponent","addComponent","getComponent","DEFAULT_OPTIONS","World","assign","systemManager","eventQueues","CustomEvent","event","detail","version","lastTime","registerComponent","System","registerSystem","unregisterSystem","getSystems","processDeferredRemoval","createEntity","_mandatoryQueries","queryConfig","unregisteredComponents","filter","c","queryComponents","mandatory","results","validEvents","eventMapping","added","removed","changed","listen","eventList","addEventListener","Array","isArray","changedComponent","json","queryDefinition","jsonQuery","method","Not","TagComponent","isTagComponent","copyValue","cloneValue","copyArray","dest","cloneArray","copyJSON","JSON","parse","stringify","cloneJSON","copyCopyable","cloneClonable","createType","typeDefinition","undefinedProperties","p","isType","Types","Number","Boolean","String","Ref","generateId","result","characters","charactersLength","charAt","floor","random","injectScript","onLoad","script","document","createElement","onload","head","documentElement","appendChild","hookConsoleAndErrors","connection","fn","args","send","apply","error","message","stack","includeRemoteIdHTML","remoteId","infoDiv","style","cssText","innerHTML","body","enableRemoteDevtools","generateNewCode","localStorage","clear","setItem","location","reload","getItem","__ECSY_REMOTE_DEVTOOLS_INJECTED","__ECSY_REMOTE_DEVTOOLS","worldsBeforeLoading","onWorldCreated","e","onLoaded","peer","Peer","host","secure","port","config","iceServers","url","debug","on","data","setAttribute","parentNode","removeChild","removeEventListener","value","eval","returnEval","urlParams","URLSearchParams","search","has"],"mappings":"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"}